@{
    ViewData["Title"] = "Döviz Dönüştürücü";
}

@section Styles {
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" rel="stylesheet" />
    <style>
        .converter-header {
            font-weight: bold;
            font-size: 1.8rem;
        }
        .currency-input {
            max-width: 200px;
        }
        .fade-update {
            animation: flash 1s;
        }
    </style>
}

<div class="container mt-5">
    <h2 class="converter-header text-primary mb-4">💱 Anlık Döviz Dönüştürücü</h2>

    <div class="row mb-3">
        <div class="col-md-3">
            <label class="form-label">Tutar</label>
            <input type="number" id="amountInput" class="form-control currency-input" value="1" />
        </div>
        <div class="col-md-3">
            <label class="form-label">Baz Döviz</label>
            <select id="baseCurrencySelect" class="form-select currency-input"></select>
        </div>
    </div>

    <div class="table-responsive">
        <table id="currencyTable" class="table table-bordered table-striped text-center align-middle">
            <thead class="table-dark">
                <tr>
                    <th>Ad</th>
                    <th>Alış</th>
                    <th>Satış</th>
                    <th>Dönüşüm</th>
                </tr>
            </thead>
            <tbody></tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

    <script>
        let latestRates = [];

        function loadInitialData() {
            $.get("/api/currency", function (data) {
                latestRates = data;
                renderCurrencyTable(data);
            });
        }

        function renderCurrencyTable(rates) {
            const tbody = $("#currencyTable tbody");
            tbody.empty();

            const baseSelect = $("#baseCurrencySelect");
            baseSelect.empty();

            rates.forEach(rate => {
                baseSelect.append(`<option value="${rate.code}">${rate.code}</option>`);
                tbody.append(`
                    <tr data-code="${rate.code}">
                        <td>${rate.name}</td>
                        <td class="buying">${rate.buyingRate.toFixed(2)}</td>
                        <td class="selling">${rate.sellingRate.toFixed(2)}</td>
                        <td class="converted">0.00</td>
                    </tr>
                `);
            });

            updateConvertedValues();
        }


        function updateRatesWithAnimation(data) {
            latestRates = data;
            data.forEach(rate => {
                const row = $(`#currencyTable tr[data-code="${rate.code}"]`);
                if (row.length) {
                    row.find(".buying").text(rate.buyingRate.toFixed(2)).addClass("animate__animated animate__flash");
                    row.find(".selling").text(rate.sellingRate.toFixed(2)).addClass("animate__animated animate__flash");
                }
            });
            updateConvertedValues();
        }

        function updateConvertedValues() {
            const amount = parseFloat($("#amountInput").val()) || 0;
            const baseCode = $("#baseCurrencySelect").val();
            

            const baseRate = baseCode === "TRY"
                ? 1
                : (latestRates.find(r => r.code === baseCode)?.sellingRate || 1);

            $("#currencyTable tbody tr").each(function () {
                const code = $(this).data("code");
                const targetRate = code === "TRY"
                    ? 1
                    : (latestRates.find(r => r.code === code)?.sellingRate || 1);

                let converted = 0;

                if (baseCode === "TRY") {
                    converted = amount / targetRate;
                } else {
                    converted = amount * (baseRate / targetRate);
                }

                $(this).find(".converted").text(converted.toLocaleString('tr-TR', { minimumFractionDigits: 2, maximumFractionDigits: 2 }));
            });
        }

        function setupSignalR() {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/currencyHub")
                .build();

            connection.on("ReceiveRates", function (data) {
                updateRatesWithAnimation(data);
            });

            connection.start().catch(console.error);
        }

        $(document).ready(function () {
            loadInitialData();
            setupSignalR();

            $("#amountInput, #baseCurrencySelect").on("input change", updateConvertedValues);
        });
    </script>
}
